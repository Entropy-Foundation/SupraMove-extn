{
  "supra_framework": {
    "config_buffer": {},
    "create_signer": {
      "create_signer": {
        "params": ["address: address"],
        "example_usage": "let signer = create_signer(address);"
      }
    },
    "system_addresses": {},
    "block": {
      "get_current_block_number": {
        "params": [],
        "example_usage": "let block_number = block::get_current_block_number();"
      },
      "get_block_hash": {
        "params": ["block_number: u64"],
        "example_usage": "let block_hash = block::get_block_hash(100);"
      }
    },
    "reconfiguration": {
      "trigger_reconfiguration": {
        "params": [],
        "example_usage": "reconfiguration::trigger_reconfiguration();"
      }
    },
    "reconfiguration_with_dkg": {},
    "genesis": {},
    "automation_registry": {},
    "event": {
      "emit_event": {
        "params": ["EventType: type", "payload: PayloadType"],
        "example_usage": "event::emit_event<EventType>(payload);"
      },
      "emit": {
        "params": ["T: store + drop"],
        "example_usage": "event::emit<EventType>(payload);"
      },
      "was_event_emitted": {
        "params": ["msg: &T"],
        "example_usage": "let emitted = event::was_event_emitted<T>(&msg);"
      }
    },
    "randomness": {},
    "state_storage": {},
    "transaction_fee": {},
    "util": {},
    "fungible_asset": {
      "create_asset": {
        "params": ["asset_name: string", "supply: u64"],
        "example_usage": "fungible_asset::create_asset(\"MyAsset\", 1000);"
      },
      "transfer_asset": {
        "params": ["from: address", "to: address", "amount: u64"],
        "example_usage": "fungible_asset::transfer_asset(sender_addr, receiver_addr, 50);"
      }
    },
    "multisig_account": {},
    "function_info": {},
    "validator_consensus_info": {
      "get_validator_info": {
        "params": ["validator_address: address"],
        "example_usage": "let validator_info = validator_consensus_info::get_validator_info(validator_addr);"
      },
      "list_validators": {
        "params": [],
        "example_usage": "let validators = validator_consensus_info::list_validators();"
      }
    },
    "dispatchable_fungible_asset": {},
    "aggregator_v2": {},
    "aggregator_factory": {},
    "chain_id": {},
    "chain_status": {},
    "consensus_config": {},
    "execution_config": {},
    "gas_schedule": {},
    "pbo_delegation_pool": {},
    "staking_config": {},
    "staking_contract": {},
    "storage_gas": {},
    "supra_config": {},
    "supra_governance": {},
    "timestamp": {
      "get_current_time": {
        "params": [],
        "example_usage": "let time = timestamp::get_current_time();"
      }
    },
    "transaction_validation": {},
    "version": {},
    "vesting": {},
    "vesting_without_staking": {},
    "supra_coin": {
      "initialize": {
        "params": ["supra_framework: &signer"],
        "example_usage": "let (burn_cap, mint_cap) = supra_coin::initialize(&signer);"
      },
      "DelegatedMintCapability": {
        "params": ["to: address"],
        "example_usage": "// Represents mint delegation for an address."
      }
    },
    "account": {
      "create_signer": {
        "params": ["address: address"],
        "example_usage": "let signer = account::create_signer(address);"
      },
      "create_account": {
        "params": ["auth_key: address"],
        "example_usage": "supra_account::create_account(auth_key);"
      },
      "KeyRotation": {
        "params": ["account: address", "old_authentication_key: vector<u8>", "new_authentication_key: vector<u8>"],
        "example_usage": "// KeyRotation event details stored in logs."
      }
    },
    "supra_account": {
      "batch_transfer": {
        "params": ["source: &signer", "recipients: vector<address>", "amounts: vector<u64>"],
        "example_usage": "supra_account::batch_transfer(&signer, recipients, amounts);"
      },
      "DirectTransferConfig": {
        "params": ["allow_arbitrary_coin_transfers: bool"],
        "example_usage": "// Represents the direct transfer configuration of an account."
      }
    }
  },
"std": {
    "vector": {
        "new": {
            "params": [],
            "description": "Creates a new vector instance.",
            "example_usage": "let vec = vector::new();"
        },
        "push": {
            "params": ["vec: vector<T>", "value: T"],
            "description": "Pushes a value onto the vector.",
            "example_usage": "vector::push(&vec, value);"
        }
    },
    "table": {
        "new": {
            "params": [],
            "description": "Creates a new table instance.",
            "example_usage": "let tbl = table::new();"
        }
    },
    "borrow_mut": {
        "params": ["addr: address"],
        "description": "Borrows a mutable reference to a resource stored at the given address.",
        "example_usage": "let resource = borrow_mut<ResourceType>(addr);"
    },
"error": {},
"features": {},
"option": {},
"features": {},
"signer": {},
"string": {},
"fixed_point32": {}
}    
}